pipeline {
    agent any

    tools {
        maven 'Maven-3.9.10'
        jdk 'Java 17'
    }

    environment {
        SCREENSHOT_BASE_DIR = "target/screenshots"
        LOG_DIR = "logs"
        REPORT_DIR = "target/reports"
        EMAIL_TO = "debasmita25@gmail.com"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Run Tests') {
            steps {
                bat "mvn clean test -Dheadless=true"
            }
        }
    }

    post {
        always {
            script {
                def attachments = []
                def testSummary = ""
                def workspace = pwd().replace("\\", "/")

                // ‚úÖ Find Extent HTML Report
                def reportHtml = powershell(returnStdout: true, script: """
                    Get-ChildItem -Path '${env.REPORT_DIR}' -Filter *.html |
                    Sort-Object LastWriteTime -Descending |
                    Select-Object -First 1 |
                    Select-Object -ExpandProperty FullName
                """).trim()

                // ‚úÖ Parse test summary from Extent HTML
                if (reportHtml && fileExists(reportHtml)) {
                    def rawHtml = readFile(reportHtml).trim()

                    def matcher = rawHtml =~ /Tests\s+passed:\s*(\d+),\s*failed:\s*(\d+),\s*skipped:\s*(\d+)/

                    if (matcher.find()) {
                        def passed = matcher[0][1]
                        def failed = matcher[0][2]
                        def skipped = matcher[0][3]
                        def total = (passed.toInteger() + failed.toInteger() + skipped.toInteger())

                        testSummary = """
                            <ul>
                                <li>‚úÖ Total: ${total}</li>
                                <li>üü¢ Passed: ${passed}</li>
                                <li>üî¥ Failed: ${failed}</li>
                                <li>üü° Skipped: ${skipped}</li>
                            </ul>
                        """

                        reportHtml = reportHtml.replace("\\", "/").replace("${workspace}/", "")
                        attachments << reportHtml
                    } else {
                        echo "‚ö†Ô∏è Could not extract test summary from HTML"
                        testSummary = "<p>‚ö†Ô∏è Could not extract summary from Extent Report.</p>"
                    }
                } else {
                    echo "‚ö†Ô∏è HTML report not found"
                    testSummary = "<p>‚ö†Ô∏è No HTML report found. Summary unavailable.</p>"
                    reportHtml = ""
                }

                // ‚úÖ Zip latest screenshot folder
                def latestScreenshotFolder = powershell(returnStdout: true, script: """
                    if (Test-Path '${env.SCREENSHOT_BASE_DIR}') {
                        Get-ChildItem -Directory '${env.SCREENSHOT_BASE_DIR}' |
                        Sort-Object LastWriteTime -Descending |
                        Select-Object -First 1 |
                        Select-Object -ExpandProperty Name
                    }
                """).trim()

                if (latestScreenshotFolder) {
                    def fullPath = "${env.SCREENSHOT_BASE_DIR}/${latestScreenshotFolder}".replace("\\", "/")
                    def screenshotZip = "screenshots.zip"
                    bat "powershell Compress-Archive -Path '${fullPath}/*' -DestinationPath '${screenshotZip}' -Force"
                    if (fileExists(screenshotZip)) {
                        attachments << screenshotZip
                    }
                }

                // ‚úÖ Zip logs
                if (powershell(returnStatus: true, script: "Test-Path '${env.LOG_DIR}'") == 0) {
                    def logsZip = "logs.zip"
                    bat "powershell Compress-Archive -Path '${env.LOG_DIR}/*' -DestinationPath '${logsZip}' -Force"
                    if (fileExists(logsZip)) {
                        attachments << logsZip
                    }
                }

                def attachmentPattern = attachments.join(',')
                echo "üìé Attachments: ${attachmentPattern}"

                // ‚úÖ Send email with summary + attachments
                emailext(
                    subject: "üß™ Test Report - Build #${env.BUILD_NUMBER} [${currentBuild.currentResult}]",
                    body: """
                        <p>Hi Team,</p>
                        <p>Test execution completed with status: <b>${currentBuild.currentResult}</b></p>
                        <h4>üìä Test Summary:</h4>
                        ${testSummary}
                        <p>üìé Attached: HTML report, screenshots, and logs (if available)</p>
                        <p><strong>Note:</strong> Download and open the HTML report in a browser.</p>
                        <p>Regards,<br/>Automation Framework</p>
                    """,
                    mimeType: 'text/html',
                    to: "${env.EMAIL_TO}",
                    attachmentsPattern: attachmentPattern
                )
            }
        }
    }
}
