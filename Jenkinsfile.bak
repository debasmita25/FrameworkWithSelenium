pipeline {
    agent any

    tools {
        maven 'Maven-3.9.10'   // Define in Global Tools with correct name
        jdk 'JDK'       // Define Java version in Global Tools
    }

    environment {
        REPORT_HTML = "target\\reports\\extent-report.html"
        SCREENSHOT_BASE_DIR = "target\\screenshots"
        LOG_DIR = "logs"
        REPORT_NAME = "Test Execution Report"
        EMAIL_TO = "debasmita25@gmail.com"  // üîÅ Replace with actual recipient
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Run Tests') {
            steps {
                bat "mvn clean test -Dheadless=true"
            }
        }

        stage('Zip Artifacts') {
            steps {
                script {
                    // Find latest timestamped screenshots folder
                    def latestScreenshotFolder = powershell(returnStdout: true, script: """
                        if (Test-Path '${env.SCREENSHOT_BASE_DIR}') {
                            Get-ChildItem -Directory '${env.SCREENSHOT_BASE_DIR}' |
                            Sort-Object LastWriteTime -Descending |
                            Select-Object -First 1 |
                            Select-Object -ExpandProperty Name
                        }
                    """).trim()

                    if (!latestScreenshotFolder) {
                        error "No screenshots folder found in ${env.SCREENSHOT_BASE_DIR}"
                    }

                    echo "üì∏ Latest Screenshot Folder: ${latestScreenshotFolder}"

                    def screenshotFullPath = "${env.SCREENSHOT_BASE_DIR}\\${latestScreenshotFolder}"
                    def screenshotZip = "screenshots.zip"
                    def logsZip = "logs.zip"

                    // Zip screenshots
                    bat """powershell -Command "if (Test-Path '${screenshotFullPath}') {
                        Compress-Archive -Path '${screenshotFullPath}\\*' -DestinationPath '${screenshotZip}' -Force
                    }" """

                    // Zip logs
                    bat """powershell -Command "if (Test-Path '${env.LOG_DIR}') {
                        Compress-Archive -Path '${env.LOG_DIR}\\*' -DestinationPath '${logsZip}' -Force
                    }" """

                    // Set environment vars for email attachments
                    env.SCREENSHOT_ZIP = screenshotZip
                    env.LOG_ZIP = logsZip
                }
            }
        }

        stage('Publish HTML Report') {
            steps {
                publishHTML(target: [
                    reportDir: 'target/reports',
                    reportFiles: 'extent-report.html',
                    reportName: "${env.REPORT_NAME}",
                    reportTitles: 'Test Results',
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true
                ])
            }
        }

        stage('Email with Report') {
            steps {
                emailext(
                    subject: "üß™ Test Report - Build #${env.BUILD_NUMBER}",
                    body: """
                        <p>Hi Team,</p>
                        <p>The automated test execution is complete. Please find below the details:</p>
                        <ul>
                          <li><a href="${env.BUILD_URL}HTML_20Report/">View Extent Report</a></li>
                        </ul>
                        <p>Regards,<br/>Automation Framework</p>
                    """,
                    mimeType: 'text/html',
                    to: "${env.EMAIL_TO}",
                    attachmentsPattern: "${env.REPORT_HTML},${env.SCREENSHOT_ZIP},${env.LOG_ZIP}"
                )
            }
        }
    }

    post {
        always {
            echo "‚úÖ Pipeline execution completed."
        }
    }
}
