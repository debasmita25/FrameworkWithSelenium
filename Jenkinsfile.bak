// ‚úÖ Global vars to persist values into post block
def reportHtml = ''
def screenshotZip = ''
def logsZip = ''

pipeline {
    agent any

    tools {
        maven 'Maven-3.9.10'
        jdk 'Java 17'
    }

    environment {
        SCREENSHOT_BASE_DIR = "target/screenshots"
        LOG_DIR = "logs"
        REPORT_NAME = "Test Execution Report"
        EMAIL_TO = "debasmita25@gmail.com"
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Run Tests') {
            steps {
                bat "mvn clean test -Dheadless=true"
            }
        }

        stage('Zip Artifacts') {
            steps {
                script {
                    screenshotZip = ''
                    logsZip = ''

                    // Find latest screenshot folder
                    def latestScreenshotFolder = powershell(returnStdout: true, script: """
                        if (Test-Path '${env.SCREENSHOT_BASE_DIR}') {
                            Get-ChildItem -Directory '${env.SCREENSHOT_BASE_DIR}' |
                            Sort-Object LastWriteTime -Descending |
                            Select-Object -First 1 |
                            Select-Object -ExpandProperty Name
                        }
                    """).trim()

                    if (latestScreenshotFolder) {
                        echo "üì∏ Latest Screenshot Folder: ${latestScreenshotFolder}"
                        def fullPath = "${env.SCREENSHOT_BASE_DIR}/${latestScreenshotFolder}"
                        screenshotZip = "screenshots.zip"
                        bat """powershell -Command "Compress-Archive -Path '${fullPath}/*' -DestinationPath '${screenshotZip}' -Force" """
                    } else {
                        echo "‚ö†Ô∏è No screenshots found."
                    }

                    // Zip logs
                    def logExists = powershell(returnStatus: true, script: "Test-Path '${env.LOG_DIR}'")
                    if (logExists == 0) {
                        logsZip = "logs.zip"
                        bat """powershell -Command "Compress-Archive -Path '${env.LOG_DIR}/*' -DestinationPath '${logsZip}' -Force" """
                    } else {
                        echo "‚ö†Ô∏è No logs folder found."
                    }
                }
            }
        }

        stage('Find HTML Report') {
            steps {
                script {
                    def reportFile = powershell(returnStdout: true, script: """
                        Get-ChildItem -Path target/reports -Filter *.html |
                        Sort-Object LastWriteTime -Descending |
                        Select-Object -First 1 |
                        Select-Object -ExpandProperty FullName
                    """).trim()

                    if (reportFile) {
                        reportFile = reportFile.replace('\\', '/')
                        reportHtml = reportFile
                        echo "‚úÖ Found HTML Report: ${reportHtml}"
                    } else {
                        echo "‚ùå No HTML report found."
                        reportHtml = ''
                    }
                }
            }
        }

        stage('Publish HTML Report') {
            steps {
                script {
                    if (reportHtml?.trim()) {
                        publishHTML(target: [
                            reportDir: 'target/reports',
                            reportFiles: reportHtml.split('/')[-1],
                            reportName: "${env.REPORT_NAME}",
                            reportTitles: 'Test Results',
                            allowMissing: true,
                            alwaysLinkToLastBuild: true,
                            keepAll: true
                        ])
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                sendEmail("‚úÖ Test Report - Build #${env.BUILD_NUMBER} SUCCESS")
            }
        }

        failure {
            script {
                sendEmail("‚ùå Test Report - Build #${env.BUILD_NUMBER} FAILED")
            }
        }

        always {
            echo "üì¨ Email attempt completed"
        }
    }
}

// ‚úÖ Shared method for emailing
def sendEmail(subjectLine) {
    def ws = pwd().replace("\\", "/")
    def attachments = []

    if (reportHtml?.trim() && fileExists(reportHtml)) {
        def relativeReport = reportHtml.replace(ws + "/", "")
        attachments << relativeReport
    }

    if (screenshotZip?.trim() && fileExists(screenshotZip)) {
        attachments << screenshotZip
    }

    if (logsZip?.trim() && fileExists(logsZip)) {
        attachments << logsZip
    }

    def attachString = attachments.join(',')
    echo "üìé Will attach: ${attachString}"

    emailext(
        subject: subjectLine,
        body: """
            <p>Hi Team,</p>
            <p>The test execution is complete: <b>${subjectLine}</b></p>
            <p>üìé Attached: HTML report, screenshots, and logs (if available).</p>
            <p>‚ö†Ô∏è Download the HTML report and open it locally in a browser.</p>
            <p>Regards,<br/>Automation Framework</p>
        """,
        mimeType: 'text/html',
        to: "${env.EMAIL_TO}",
        attachmentsPattern: attachString
    )
}
